@page "/counter"﻿
@using BlazorWASM.Apis
@using BlazorWASM.Client
@using BlazorWASM.Constants
@using BlazorWASM.Models

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="OpenStudent">Open Student</button>
<AuthorizeView>
    <Authorized>
        <button class="btn btn-primary" @onclick="PrivateStudent" >Private Student</button>
    </Authorized>
    <NotAuthorized>
        <p> Please LogIn for watching info.</p>
    </NotAuthorized>
</AuthorizeView>

<AuthorizeView Policy=@AuthConstants.NamePolicy>
    <Authorized>       
        <button class="btn btn-primary" @onclick="AddStudent" >Add Student</button>
    </Authorized>
    <NotAuthorized>
        <p> Incorrect nickname.</p>
    </NotAuthorized>
</AuthorizeView>

<AuthorizeView Roles=@AuthConstants.StudentRole>
    <Authorized>
        HELLO ROLEPOLICY
    </Authorized>
    <NotAuthorized>
        <p> Incorrect Role.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private int currentCount = 0;

    [Inject] private IStudentApi client { get; set; } = default!;
    private async Task OpenStudent()
    {
        try
        {
            var model1 = await client.GetOpenModel();
            Console.WriteLine(model1.Name);
        }
        catch (Exception ex)
        {
            throw;
        }

    }

    private async Task PrivateStudent()
    {
        try
        {
            var model2 = await client.GetPrivateStudentModel();
            Console.WriteLine(model2.Name);
        }
        catch (Exception ex)
        {
            throw;
        }
    }

    private async Task AddStudent()
    {
        var source = new CancellationTokenSource();
        source.CancelAfter(TimeSpan.FromSeconds(5));
        var token = source.Token;
        var result = await client.AddStudent(new StudentModel
        {
            Name= "Gago",
            Id = 15,           
        },token);    
        Console.WriteLine(result.Name);
    }
}

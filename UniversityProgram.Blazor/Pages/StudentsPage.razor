@page "/Students"
@using UniversityProgram.Blazor.Apis
@using UniversityProgram.Blazor.Models
@inject IStudentApi StudentApi
<PageTitle>Students Page</PageTitle>
<h3>StudentComponent</h3>


@if (isLoading==true)
{
    <p>Loading...</p>
}
else if (Students == null || Students.Count == 0)
{
    <p>No students</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Money</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in Students)
            {
                <tr>
                    <td><MudButton OnClick="()=>OpenStudent(student.Id)">@student.Name</MudButton></td>
                    <td>@student.Email</td>
                    <td>@student.Money</td>
                    <td><MudButton OnClick="async ()=> await DeleteAsync(student.Id)" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Delete</MudButton></td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;
    private bool isLoading = true;
    public List<StudentModel> Students { get; set; } = new List<StudentModel>();

    override protected async Task OnInitializedAsync()
    {
        await RefreshSPage();
    }
    private async Task RefreshSPage()
    {
        Students = (await StudentApi.GetAll()).ToList();
        isLoading = false;
    }
    private void OpenStudent(int Id)
    {
        NavigationManager.NavigateTo($"/Student/{Id}");
    }

    private async Task DeleteAsync(int id)
    {
        isLoading = true;
        await StudentApi.Delete(id);
        await RefreshSPage();
    }
}
